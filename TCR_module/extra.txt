/**
 * ** Assumption: Can't have e1 = e2 and n1 = n2 **
 *
 * Tests of the horizontal line through (e,n) in the positive x-direction 
 * intersects the line between (e1,n1) and (e2,n2).
 * e - easting of data point
 * n - northing of data point
 * (e1,n1) - vertex of tree crown polygon
 * (e2,n2) - vertex of tree crown polygon
 */
int intersects_replaced(double e, double n, double e1, double n1, double e2, double n2)
{
	/**
	 * Handle case e1 = e2 and n1 = n2 (this should never happen)
	 */
	 if(e1 == e2 && n1 == n2)
	 	 return 0;
	 
	/**
	 * Handle case e1 = e2
	 */
	 if(e1 == e2){
	 	 if(e > e1 || 
	 	 ( (n < n1 || n >= n2) && (n <= n2 || n > n1) )){	//y between y1 and y2
	 	 	//printf("e: %lf n: %lf e1: %lf  e2: %lf n1: %lf n2: %lf\n", e, n, e1, e2, n1, n2);
	 	 	return 0;
	 	 }
	 	 printf("e1 == e2 -> e: %.2lf n: %.2lf e1: %.2lf  e2: %.2lf n1: %.2lf n2: %.2lf\n", e, n, e1, e2, n1, n2);
	 	 return 1;
	 }
	 
	 /**
	  * Handle case n1 = n2 (horizontal line)
	  */
	 if(n1 == n2){
	 	 if(n != n1 ||
	 	 ( (e < e1 || e >= e2) && (e <= e2 || e > e1) )){ 	//x not between x1 and x2
	 	 	//printf("e: %ld n: %lf e1: %lf  e2: %lf n1: %lf n2: %lf\n", e, n, e1, e2, n1, n2);
	 	 	return 0;
	 	 }
	 	 printf("n1 == n2 -> e: %.2lf n: %.2lf e1: %.2lf  e2: %.2lf n1: %.2lf n2: %.2lf\n", e, n, e1, e2, n1, n2);
	 	 return 1;
	 }
	
	/**
	 * Handle case e1 != e2 and n1 != n2
	 */
	if((n < n1 || n >= n2) && (n <= n2 || n > n1))
		return 0;
	
	/**
	 * Calculate x intercept
	 * - y = mx + b describes the line between (e1,n1) and (e2,n2)
	 * - x-coord of intersection point must be in [x1, x2)
	 */
	
	double m, b, xint;
	
	m = (n2 - n1)/(e2 - e1);
	b = n1 - m*e1;
	
	xint = (n - b)/m;
	
	printf("xint: %lf m: %lf e1: %lf  e2: %lf n1: %lf n2: %lf\n", xint, m, e1, e2, n1, n2);
	
	if(xint >= e1 && xint < e2 && xint >= e)
		return 1;
	return 0;
}
